CREATE DATABASE ig_clone;
2. USE ig_clone;

3. /*Users*/
CREATE TABLE users(
id INT AUTO_INCREMENT UNIQUE PRIMARY KEY,
username VARCHAR(255) NOT NULL,
created_at TIMESTAMP DEFAULT NOW()
);
/*Photos*/
CREATE TABLE photos(
id INT AUTO_INCREMENT PRIMARY KEY,
image_url VARCHAR(355) NOT NULL,
user_id INT NOT NULL,
created_dat TIMESTAMP DEFAULT NOW(),
FOREIGN KEY(user_id) REFERENCES users(id)
);
/*Comments*/
CREATE TABLE comments(
id INT AUTO_INCREMENT PRIMARY KEY,
comment_text VARCHAR(255) NOT NULL,
user_id INT NOT NULL,
photo_id INT NOT NULL,
created_at TIMESTAMP DEFAULT NOW(),
FOREIGN KEY(user_id) REFERENCES users(id),
FOREIGN KEY(photo_id) REFERENCES photos(id)
);

/*Likes*/
CREATE TABLE likes(
user_id INT NOT NULL,
photo_id INT NOT NULL,
created_at TIMESTAMP DEFAULT NOW(),
FOREIGN KEY(user_id) REFERENCES users(id),
FOREIGN KEY(photo_id) REFERENCES photos(id),
PRIMARY KEY(user_id,photo_id)
);
/*follows*/
CREATE TABLE follows(
follower_id INT NOT NULL,
followee_id INT NOT NULL,
created_at TIMESTAMP DEFAULT NOW(),
FOREIGN KEY (follower_id) REFERENCES users(id),
FOREIGN KEY (followee_id) REFERENCES users(id),
PRIMARY KEY(follower_id,followee_id)
);
/*Tags*/
CREATE TABLE tags(
id INTEGER AUTO_INCREMENT PRIMARY KEY,
tag_name VARCHAR(255) UNIQUE NOT NULL,
created_at TIMESTAMP DEFAULT NOW()
);
/*Junction table: Photos - Tags*/
CREATE TABLE photo_tags(
photo_id INT NOT NULL,
tag_id INT NOT NULL,
FOREIGN KEY(photo_id) REFERENCES photos(id),
FOREIGN KEY(tag_id) REFERENCES tags(id),
PRIMARY KEY(photo_id,tag_id)
);
This is how I make a table and I use
INSERT INTO users (username, created_at) VALUES(........);
INSERT INTO photos(image_url, user_id) VALUES(.........);
INSERT INTO follows(follower_id, followee_id) VALUES(........);
INSERT INTO comments(comment_text, user_id, photo_id) VALUES(.......);
INSERT INTO likes(user_id,photo_id) VALUES(........);
INSERT INTO tags(tag_name) VALUES(.......);
INSERT INTO photo_tags(photo_id, tag_id) VALUES(.......);
these to insert large data.
Task1:
/* Identify the five oldest users on Instagram from the provided database.*/

SELECT * FROM users
ORDER BY created_at ASC
LIMIT 5;

Task2:
/*Identify users who have never posted a single photo on Instagram.*/

SELECT username
from users u
left join photos p
on u.id = p. user_id
where p.id is null;

/*Determine the winner of the contest and provide their details to the team.*/
SELECT
u.username,
p.id AS photo_id,
p.image_url,
COUNT(l.user_id) AS total_likes
FROM photos p
INNER JOIN users u ON p.user_id = u.id

LEFT JOIN likes l ON p.id = l.photo_id
GROUP BY p.id, u.username, p.image_url
ORDER BY total_likes DESC
LIMIT 1;

/*Identify and suggest the top five most commonly used hashtags on the
platform.*/

SELECT
t.tag_name,
COUNT(pt.photo_id) AS usage_count
FROM tags t
JOIN photo_tags pt ON t.id = pt.tag_id
GROUP BY t.tag_name
ORDER BY usage_count DESC
LIMIT 5;

/*Determine the day of the week when most users register on Instagram. Provide
insights on when to schedule an ad campaign.*/

SELECT
DAYNAME(created_at) AS registration_day,
COUNT(*) AS total_users
FROM users

GROUP BY registration_day
ORDER BY total_users DESC
LIMIT 1;

/*Calculate the average number of posts per user on Instagram.
Also, provide the total number of photos on Instagram divided by the total
number of users.*/
SELECT
COUNT(p.id) / COUNT(DISTINCT u.id) AS avg_posts_per_user,
COUNT(p.id) AS total_photos,
COUNT(DISTINCT u.id) AS total_users
FROM users u
LEFT JOIN photos p ON u.id = p.user_id;

/*Identify users (potential bots) who have liked every single photo on the site,
as this is not typically possible for a normal user.*/
SELECT
l.user_id,
u.username,
COUNT(DISTINCT l.photo_id) AS liked_photos,
(SELECT COUNT(*) FROM photos) AS total_photos
FROM likes l
JOIN users u ON l.user_id = u.id
GROUP BY l.user_id, u.username
HAVING liked_photos = (SELECT COUNT(*) FROM photos);









